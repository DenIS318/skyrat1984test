name: SS1984 Update Cached Rust
on:
  workflow_dispatch:
  pull_request_target:
    types:
      - closed
    branches:
      - master

permissions:
  contents: write

jobs:
  compile:
    runs-on: windows-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Generate App Token
        id: app-token-generation
        uses: actions/create-github-app-token@v2
        if: env.APP_PRIVATE_KEY != '' && env.APP_ID != ''
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
        env:
          APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}
          APP_ID: ${{ secrets.APP_ID }}

      - name: Cache RUST_REMOTE folder
        uses: actions/cache@v4
        with:
          path: RUST_REMOTE
          key: rust_remote_repo_1984
          restore-keys: |
            rust_remote_repo_1984

      - name: Setup part 7 (Rust Cache)
        uses: Swatinem/rust-cache@v2.8.0
        with:
          workspaces: |
            RUST_REMOTE
            RUST
          cache-all-crates: true

      - name: Disable skipping rust build
        shell: cmd
        run: type nul > tools\build_rust_config.txt

      - name: Build RUST
        id: build_step
        shell: cmd
        run: |
          tools\build_rust_1984.bat
          IF %ERRORLEVEL% NEQ 0 (
              exit /b 220
          ) else (
              echo success=0 >> %GITHUB_OUTPUT%
          )

      - name: Set release tag variable
        if: steps.build_step.outputs.success == '0'
        run: echo "RELEASE_TAG=rust_cached" >> $GITHUB_ENV

      - name: Compute local file MD5
        id: localhash
        if: steps.build_step.outputs.success == '0'
        shell: cmd
        run: |
          @echo off
          for /f "tokens=1" %%i in ('certutil -hashfile rust_1984.dll MD5 ^| findstr /v "hash" ^| findstr /v "CertUtil"') do (
            setlocal enabledelayedexpansion
            set localmd5=%%i
            endlocal & set "localmd5=!localmd5!"
            echo md5=!localmd5!>>%GITHUB_OUTPUT%
            goto :done
          )
          :done

      - name: Download existing release asset if exists
        id: download_asset
        if: steps.build_step.outputs.success == '0'
        shell: cmd
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          @echo off
          for /f "delims=" %%i in ('gh release view "%RELEASE_TAG%" --json id -q ".id"') do set RELEASE_ID=%%i
          for /f "delims=" %%a in ('gh api repos/%GITHUB_REPOSITORY%/releases/%RELEASE_ID%/assets --jq ".[] | select(.name==\"rust_1984.dll\") | .url"') do set ASSET_URL=%%a
          if defined ASSET_URL (
              gh api -H "Accept: application/octet-stream" %ASSET_URL% --output downloaded-file.dll
          )

      - name: Compute remote file MD5 if downloaded
        id: remotehash
        if: steps.build_step.outputs.success == '0'
        shell: cmd
        run: |
          @echo off
          setlocal enabledelayedexpansion
          if exist downloaded-file.dll (
              for /f "tokens=1" %%x in ('certutil -hashfile downloaded-file.dll MD5 ^| findstr /v "hash" ^| findstr /v "CertUtil"') do (
                  setlocal enabledelayedexpansion
                  set remotemd5=%%x
                  endlocal & set "remotemd5=!remotemd5!"
                  echo md5=!remotemd5!>>%GITHUB_OUTPUT%
              )
              echo md5=!remotemd5!>>%GITHUB_OUTPUT%
          ) else (
              echo md5=none>>%GITHUB_OUTPUT%
          )
          endlocal

      - name: Upload file if changed
        if: steps.localhash.outputs.md5 != steps.remotehash.outputs.md5 && steps.build_step.outputs.success == '0'
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release upload "$RELEASE_TAG" rust_1984.dll --clobber
        shell: cmd
