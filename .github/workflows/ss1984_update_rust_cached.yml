name: SS1984 Update Cached Rust
on:
  workflow_dispatch:
  pull_request_target:
    types:
      - closed
    branches:
      - master

permissions:
  contents: write

jobs:
  compile:
    runs-on: windows-latest
    timeout-minutes: 20

    if: github.event.pull_request.merged == true
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Generate App Token
        id: app-token-generation
        uses: actions/create-github-app-token@v2
        if: env.APP_PRIVATE_KEY != '' && env.APP_ID != ''
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
        env:
          APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}
          APP_ID: ${{ secrets.APP_ID }}

      - name: Cache RUST_REMOTE folder
        uses: actions/cache@v4
        with:
          path: RUST_REMOTE # folder to cache
          key: rust_remote_repo_1984 # key for the cache
          restore-keys: |
            rust_remote_repo_1984
      - name: Setup part 7 (Rust Cache)
        uses: Swatinem/rust-cache@v2.8.0
        with:
          workspaces: |
            RUST_REMOTE
            RUST
          cache-all-crates: true
      - name: Build RUST
        run: |
          tools\build_rust_1984.bat
          if %errorlevel% equ 0 (
            exit /b 0
          ) else (
            exit /b 1
          )

      - name: Set release tag variable
        if: steps.build_step.outputs.success == '0'
        run: echo "RELEASE_TAG=rust_cached" >> $GITHUB_ENV

      - name: Compute local file MD5
        id: localhash
        if: steps.build_step.outputs.success == '0'
        run: echo "md5=$(md5sum rust_1984.dll | cut -d ' ' -f1)" >> $GITHUB_OUTPUT

      - name: Download existing release asset if exists
        id: download_asset
        if: steps.build_step.outputs.success == '0'
        run: |
          RELEASE_ID=$(gh release view "$RELEASE_TAG" --json id -q ".id")
          ASSET_URL=$(gh api repos/${{ github.repository }}/releases/$RELEASE_ID/assets --jq ".[] | select(.name==\"rust_1984.dll\") | .url")
          if [ -n "$ASSET_URL" ]; then
            gh api -H "Accept: application/octet-stream" $ASSET_URL --output downloaded-file.dll
          fi

      - name: Compute remote file MD5 if downloaded
        id: remotehash
        if: steps.build_step.outputs.success == '0'
        run: |
          if [ -f downloaded-file.dll ]; then
            echo "md5=$(md5sum downloaded-file.dll | cut -d ' ' -f1)" >> $GITHUB_OUTPUT
          else
            echo "md5=none" >> $GITHUB_OUTPUT
          fi

      - name: Upload file if changed
        if: steps.localhash.outputs.md5 != steps.remotehash.outputs.md5 && steps.build_step.outputs.success == '0'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "$RELEASE_TAG" rust_1984.dll --clobber
