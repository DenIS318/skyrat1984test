#define CELL_NONE "None"
#define CELL_UNKNOWN "Unknown"

/obj/machinery/status_display/door_timer
	var/prison_occupant = CELL_UNKNOWN // string
	var/crimes = CELL_NONE
	var/officer = CELL_UNKNOWN
	var/prisoner_name
	var/prisoner_charge
	var/prisoner_time
	var/prisoner_hasrecord = FALSE
	var/timetoset = 0 // Used to set releasetime upon starting the timer
	var/printed = FALSE

/obj/machinery/status_display/door_timer/ui_interact(mob/user, datum/tgui/ui)
	// don't call base
	ui = SStgui.try_update_ui(user, src, ui)
	if(!ui)
		ui = new(user, src, "BrigTimer1984", name)
		ui.open()

/obj/machinery/status_display/door_timer/ui_static_data(mob/user)
	var/list/data = list()
	data["spns"] = list()
	for(var/mob/living/carbon/human/H in range(4, get_turf(src)))
		if(H.handcuffed)
			data["spns"] += H.name
	return data

/obj/machinery/status_display/door_timer/ui_data(mob/user)
	. = ..()
	var/list/data = .
	if (!data)
		return .
	data["cell_id"] = name
	data["occupant"] = prison_occupant
	data["crimes"] = crimes
	data["brigged_by"] = officer
	data["time_set"] = seconds_to_clock(timetoset / 10)
	data["time_left"] = seconds_to_clock(time_left())
	data["timing"] = timing
	data["isAllowed"] = allowed(user)
	data["prisoner_name"] = prisoner_name
	data["prisoner_charge"] = prisoner_charge
	data["prisoner_time"] = prisoner_time
	data["prisoner_hasrec"] = prisoner_hasrecord
	return data

/obj/machinery/status_display/door_timer/timer_start()
	. = ..()
	if (!.)
		return .

	if(!printed)
		if(!print_report())
			timing = FALSE
			return FALSE

	// all good
	timer_duration = timetoset

/obj/machinery/status_display/door_timer/proc/grey_tide_open()
	var/result = timer_end()
	if (!result)
		return

	// deleted part of record update

	clear_vals()

/obj/machinery/status_display/door_timer/proc/clear_vals()
	prison_occupant = CELL_UNKNOWN
	crimes = CELL_NONE
	timetoset = 0
	officer = CELL_UNKNOWN

/obj/machinery/status_display/door_timer/proc/timer_end_full(forced = FALSE) // headache of SHOULD_NOT_SLEEP of SPACEMANDMM
	var/result = timer_end()
	if (!result)
		return

	var/datum/record/crew/R = find_record(prison_occupant)
	if(R) // update record & status
		var/author_name = name
		var/current_date = "[time2text(world.timeofday, "MM")]/[time2text(world.timeofday, "DD")]/[CURRENT_STATION_YEAR]"
		var/details_text = "Autogenerated on [current_date] [station_time_timestamp()]<BR>Released for the charges of \"[crimes]\""
		var/fine_amount = 0

		// crimes update

		var/datum/crime/citation/new_citation = new(name = prison_occupant, details = details_text, author = author_name, fine = fine_amount)

		R.citations += new_citation
		R.wanted_status = WANTED_DISCHARGED
		update_all_security_huds()

		// db stuff
		SSblackbox.ReportCitation(REF(new_citation), "AUTOGENERATED", author_name, prison_occupant, WANTED_DISCHARGED, crimes, fine_amount)

	clear_vals()

/obj/machinery/status_display/door_timer/proc/ui_act_extra(action, list/params, datum/tgui/ui, datum/ui_state/state)
	var/mob/user = usr
	switch(action)
		if("prisoner_name")
			if(params["prisoner_name"])
				prisoner_name = params["prisoner_name"]
				return TRUE

			var/new_name = tgui_input_text(usr, "Prisoner Name:", name, prisoner_name, MAX_NAME_LEN, encode = FALSE)
			if(isnull(new_name))
				return FALSE
			prisoner_name = new_name
			if(prisoner_name)
				var/datum/record/crew/R = find_record(prisoner_name)
				prisoner_hasrecord = !isnull(R)
				return TRUE

		if("prisoner_charge")
			var/new_charge = tgui_input_text(usr, "Prisoner Charge:", name, prisoner_charge, encode = FALSE)
			if(isnull(new_charge))
				return FALSE
			prisoner_charge = new_charge
			return TRUE

		if("prisoner_time")
			var/new_time = tgui_input_number(usr, "Prisoner Time (in minutes):", name, prisoner_time, 60)
			if(isnull(new_time))
				return FALSE
			prisoner_time = new_time * 10 * 60
			if (!set_timer(prisoner_time))
				return FALSE
			user.investigate_log("modified the timer for cell [id], currently [prisoner_time]", INVESTIGATE_RECORDS)
			user.log_message("modified the timer for cell [id], currently [prisoner_time]", LOG_ATTACK)
			return TRUE

		if("restart_timer")
			if(!timing)
				return FALSE
			var/reset_reason = tgui_input_text(usr, "Reason for resetting timer:", name)
			if(!reset_reason)
				to_chat(usr, "<span class='warning'>Cancelled reset: reason field is required.</span>")
				return FALSE
			timer_duration = timetoset MINUTES
			aas_config_announce(/datum/aas_config_entry/brig_cell_restart,
				list("OCCUPANT" = prison_occupant, "USER" = isobserver(usr) ? "Central Command" : user.name, "REASON" = reset_reason),
				src, list(broadcast_channel))
			notify_prisoner("Your brig timer has been reset for: '[reset_reason]'.")
			return TRUE

	return FALSE

/obj/machinery/status_display/door_timer/proc/notify_prisoner(notifytext)
	for(var/mob/living/carbon/human/H in range(4, get_turf(src)))
		if(prison_occupant == H.name)
			to_chat(H, "[src] beeps, \"[notifytext]\"")
			return
	say("[src] beeps, \"[prison_occupant]: [notifytext]\"")

// Set timetoset
/obj/machinery/status_display/door_timer/proc/timeset(seconds)
	timetoset = seconds * 10

	if(timetoset <= 0)
		timetoset = 0

	return

/obj/machinery/status_display/door_timer/proc/print_report()
	if(prison_occupant == CELL_UNKNOWN || crimes == CELL_NONE)
		return FALSE

	printed = TRUE
	officer = usr.name

	// Print on warrant consoles

	if (SSmachines)
		var/list/warrant_consoles = SSmachines.get_machines_by_type(/obj/machinery/computer/warrant)
		if (warrant_consoles && length(warrant_consoles) > 0)
			var/paper_name ="[id] log - [prison_occupant] [station_time_timestamp()]"
			var/raw_text = "<center><b>[id] - Brig record</b></center><br><hr><br>"
			raw_text += {"<center>[station_name()] - Security Department</center><br>
				<center><small><b>Admission data:</b></small></center><br>
				<small><b>Log generated at:</b>		[station_time_timestamp()]<br>
				<b>Detainee:</b>		[prison_occupant]<br>
				<b>Duration:</b>		[seconds_to_time(timetoset / 10)]<br>
				<b>Charge(s):</b>	[crimes]<br>
				<b>Arresting Officer:</b>		[usr.name]<br><hr><br>
				<small>This log file was generated automatically upon activation of a cell timer.</small>"}
			for (var/obj/machinery/computer/warrant/console in warrant_consoles)
				var/obj/item/paper/P = new /obj/item/paper(console.loc)
				P.name = paper_name
				P.add_raw_text(raw_text)

				playsound(console.loc, "sound/machines/printer.ogg", 50, TRUE)

	// Make records

	var/datum/record/crew/R = find_record(prison_occupant)
	var/occupant_rank = "Unknown"
	var/rank = ""
	if(R) // update record & status
		occupant_rank = R.rank

		// get card & rank of issuer
		var/id_card
		if(iscarbon(usr))
			var/mob/living/carbon/carbon_human = usr
			var/obj/item/id_slot = carbon_human.get_item_by_slot(ITEM_SLOT_ID)
			if(id_slot)
				id_card = id_slot?.GetID()
		if (id_card)
			var/retrieved_job = retrieve_relevant_job(usr, id_card, TRUE)
			if (retrieved_job)
				rank = retrieved_job

		// init variables

		var/author_name = name
		var/current_date = "[time2text(world.timeofday, "MM")]/[time2text(world.timeofday, "DD")]/[CURRENT_STATION_YEAR]"
		var/details_text = "Autogenerated on [current_date] [station_time_timestamp()]<BR>Sentenced to [timetoset/10] seconds for the charges of \"[crimes]\" by [rank] [officer]"
		var/fine_amount = 0

		// crimes update

		var/datum/crime/citation/new_citation = new(name = prison_occupant, details = details_text, author = author_name, fine = fine_amount)

		R.citations += new_citation
		R.wanted_status = WANTED_PRISONER
		update_all_security_huds()

		// db stuff
		SSblackbox.ReportCitation(REF(new_citation), "AUTOGENERATED", author_name, prison_occupant, WANTED_PRISONER, crimes, fine_amount)

	var/timetext = seconds_to_time(timetoset / 10)
	aas_config_announce(/datum/aas_config_entry/brig_cell_incarcerated,
		list("OCCUPANT" = prison_occupant, "OCCUPANTRANK" = occupant_rank,
		"TIME" = timetext,
		"USER" = isobserver(usr) ? "Central Command" : officer, "USERRANK" = rank,
		"CRIMES" = crimes),
		src, list(broadcast_channel))

	// Notify the actual criminal being brigged. This is a QOL thing to ensure they always know the charges against them.
	// Announcing it on radio isn't enough, as they're unlikely to have sec radio.
	notify_prisoner("You have been incarcerated for [timetext] for the crime of: '[crimes]'.")

	return TRUE
