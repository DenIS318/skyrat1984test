#define PROGRESSIVE_DYNAMIC_TITLE "\[Progressive Dynamic\]"

// If enabled, all these additions will work
GLOBAL_VAR_INIT(dynamic_progressive_enabled, TRUE)

/datum/controller/subsystem/dynamic
	// Coefficients for roles (higher one takes priority, so Head Of Security uses security_coefficient)
	var/security_coefficient = 5.0
	var/head_coefficient = 4.0
	var/crew_coefficient = 1.0

	var/roles_coefficient_multiplier = 2.0 // All coefficients (security_coefficient... etc) multiplied by this
	var/max_generated_threat = 100 // How much threat could be generated by this system before it stops

	var/increase_interval = 1 MINUTES // deciseconds, 600 = 1 minute, zero and negative values will disable timer completly, effective stopping the system from startup
	var/max_increase_time = 70 MINUTES // At this point and after, coefficient for threat = max_increase_coeff
	var/min_increase_coeff = 0.0 // minimum value of coefficient at max_increase_time, which overall_power is multiplied by
	var/max_increase_coeff = 1.0 // maximum value of coefficient at max_increase_time, which overall_power is multiplied by

	// NO CONFIGURATION PAST THIS
	var/generated_threat_by_progressive_dynamic = 0 // How much threat was generated by progressive dynamic
	/// The timer ID to increase interval and all that stuff
	var/progressive_dynamic_timer_id

/datum/controller/subsystem/dynamic/proc/on_progressive_interval()
	if (!GLOB.dynamic_progressive_enabled || generated_threat_by_progressive_dynamic >= max_generated_threat)
		return

	var/time_in_deciseconds = world.time
	var/sec_amount = 0
	var/head_amount = 0
	var/crew_amount = 0

	for(var/mob/checked_mob in GLOB.mob_list)
		if (!checked_mob.ckey)
			continue
		if(isnewplayer(checked_mob))
			continue
		if(!checked_mob.mind || isbrain(checked_mob) || isobserver(checked_mob))
			continue
		if (checked_mob.stat == DEAD || is_centcom_level(checked_mob.z) || !checked_mob.client)
			continue
		if(checked_mob.mind.special_role)
			continue
		// HIGHER PRIORITY CHECKS GOES FIRST, SO HEADS AND ETC ARE SKIPPED IF MOB IN SECURITY
		if(checked_mob.mind.assigned_role?.departments_list?.Find(/datum/job_department/security))
			sec_amount++
		if(checked_mob.mind.assigned_role?.departments_list?.Find(/datum/job_department/central_command))
			sec_amount++
		if(checked_mob.mind.assigned_role?.departments_list?.Find(/datum/job_department/command))
			sec_amount++

	var/overall_power = calculate_station_power(sec_amount, head_amount, crew_amount)
	var/threat_increase = calculate_threat_increase(time_in_deciseconds, overall_power)

	if (threat_increase + threat_level > max_threat_level)
		threat_increase = max_threat_level - threat_level
	threat_level += threat_increase
	generated_threat_by_progressive_dynamic += threat_increase
	for(var/list/logs in threat_log)
		log_threat(threat_increase, logs, "[gameTimestamp()]: [PROGRESSIVE_DYNAMIC_TITLE]: automatically increasing threat (secs = [sec_amount], heads = [head_amount], crew = [crew_amount])")

	if (generated_threat_by_progressive_dynamic >= max_generated_threat)
		progressive_dynamic_timer_id = null // Stop timer

/datum/controller/subsystem/dynamic/proc/calculate_station_power(sec_amount, head_amount, crew_amount)
	if (!sec_amount)
		sec_amount = 0
	if (!head_amount)
		head_amount = 0
	if (!crew_amount)
		crew_amount = 0
	var/overall_power = sec_amount * security_coefficient + head_amount * head_coefficient + crew_amount * crew_coefficient
	if (overall_power < 0)
		return 0
	return overall_power

/datum/controller/subsystem/dynamic/proc/calculate_threat_coefficient(time_in_deciseconds)
	if (!time_in_deciseconds || !max_increase_time) // should be fine to avoid zero division
		return 0
	var/normalized_time = time_in_deciseconds / max_increase_time
	if (normalized_time > max_increase_coeff) // clamping
		normalized_time = max_increase_coeff
	else if (normalized_time < min_increase_coeff)
		normalized_time = min_increase_coeff
	return (min_increase_coeff + max_increase_coeff - min_increase_coeff) * normalized_time // typical lerp

/datum/controller/subsystem/dynamic/proc/calculate_threat_increase(time_in_deciseconds, overall_power)
	if (!overall_power)
		return 0

	return calculate_threat_coefficient(time_in_deciseconds) * overall_power

/datum/controller/subsystem/dynamic/pre_setup()
	. = ..()
	if (!.)
		return FALSE

	if (increase_interval <= 0)
		GLOB.dynamic_progressive_enabled = FALSE
		return TRUE

	progressive_dynamic_timer_id = addtimer(CALLBACK(src, PROC_REF(on_progressive_interval)), increase_interval)
	return TRUE

/datum/controller/subsystem/dynamic/proc/get_progressive_admin_panel(list/dat)
	if (!dat)
		return
	if (increase_interval > 0)
		dat += "Progressive Dynamic: <a href='byond://?src=[text_ref(src)];[HrefToken()];progressive_dynamic=1'><b>[GLOB.dynamic_progressive_enabled ? "On" : "Off"]</b></a><br/>"
	else
		dat += "Progressive Dynamic: <b>DISABLED</b> due to zero or negative increase_interval<br/>" // Check config in that case

/datum/controller/subsystem/dynamic/Topic(href, href_list)
	. = ..(href, href_list)
	if (.)
		return
	if (href_list["progressive_dynamic"])
		GLOB.dynamic_progressive_enabled = !GLOB.dynamic_progressive_enabled
